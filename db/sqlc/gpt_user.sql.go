// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: gpt_user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO gpt_user (
  chat_id,
  gpt_token
) VALUES (
  $1, $2
) RETURNING id
`

type CreateUserParams struct {
	ChatID   string `json:"chat_id"`
	GptToken string `json:"gpt_token"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.ChatID, arg.GptToken)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE FROM gpt_user
WHERE chat_id = $1
`

func (q *Queries) DeleteAccount(ctx context.Context, chatID string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, chatID)
	return err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, chat_id, gpt_token, created_at FROM gpt_user
WHERE chat_id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, chatID string) (GptUser, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, chatID)
	var i GptUser
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.GptToken,
		&i.CreatedAt,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :one
SELECT id, chat_id, gpt_token, created_at FROM gpt_user
WHERE chat_id = $1 LIMIT 1
`

func (q *Queries) GetUsers(ctx context.Context, chatID string) (GptUser, error) {
	row := q.db.QueryRowContext(ctx, getUsers, chatID)
	var i GptUser
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.GptToken,
		&i.CreatedAt,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, chat_id, gpt_token, created_at FROM gpt_user
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]GptUser, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GptUser
	for rows.Next() {
		var i GptUser
		if err := rows.Scan(
			&i.ID,
			&i.ChatID,
			&i.GptToken,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserToken = `-- name: UpdateUserToken :one
UPDATE gpt_user
SET gpt_token = $2
WHERE chat_id = $1
RETURNING id, chat_id, gpt_token, created_at
`

type UpdateUserTokenParams struct {
	ChatID   string `json:"chat_id"`
	GptToken string `json:"gpt_token"`
}

func (q *Queries) UpdateUserToken(ctx context.Context, arg UpdateUserTokenParams) (GptUser, error) {
	row := q.db.QueryRowContext(ctx, updateUserToken, arg.ChatID, arg.GptToken)
	var i GptUser
	err := row.Scan(
		&i.ID,
		&i.ChatID,
		&i.GptToken,
		&i.CreatedAt,
	)
	return i, err
}
